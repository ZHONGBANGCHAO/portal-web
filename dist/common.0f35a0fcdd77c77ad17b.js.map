{"version":3,"sources":["webpack:///common.0f35a0fcdd77c77ad17b.js","webpack:///./node_modules/vuex-router-sync/index.js"],"names":["webpackJsonp","100","module","exports","__webpack_require__","103","cloneRoute","to","from","clone","name","path","hash","query","params","fullPath","meta","Object","freeze","sync","store","router","options","moduleName","registerModule","namespaced","state","currentRoute","mutations","ROUTE_CHANGED","transition","currentPath","isTimeTraveling","storeUnwatch","watch","route","push","afterEachUnHook","afterEach","commit","unregisterModule"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,EAASC,GAEjCA,EAAoB,GACpBA,EAAoB,IACpBA,EAAoB,IACpBF,EAAOC,QAAUC,EAAoB,MAK/BC,IACA,SAAUH,EAAQC,GC6CxB,QAAAG,GAAAC,EAAAC,GACA,GAAAC,IACAC,KAAAH,EAAAG,KACAC,KAAAJ,EAAAI,KACAC,KAAAL,EAAAK,KACAC,MAAAN,EAAAM,MACAC,OAAAP,EAAAO,OACAC,SAAAR,EAAAQ,SACAC,KAAAT,EAAAS,KAKA,OAHAR,KACAC,EAAAD,KAAAF,EAAAE,IAEAS,OAAAC,OAAAT,GAxEAN,EAAAgB,KAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAC,IAAAD,OAAiCC,YAAA,OAEjCH,GAAAI,eAAAD,GACAE,YAAA,EACAC,MAAApB,EAAAe,EAAAM,cACAC,WACAC,cAAA,SAAAH,EAAAI,GACAV,EAAAM,MAAAH,GAAAjB,EAAAwB,EAAAvB,GAAAuB,EAAAtB,SAKA,IACAuB,GADAC,GAAA,EAIAC,EAAAb,EAAAc,MACA,SAAAR,GAAsB,MAAAA,GAAAH,IACtB,SAAAY,GACA,GAAApB,GAAAoB,EAAApB,QACAA,KAAAgB,IAGA,MAAAA,IACAC,GAAA,EACAX,EAAAe,KAAAD,IAEAJ,EAAAhB,KAEKI,MAAA,IAILkB,EAAAhB,EAAAiB,UAAA,SAAA/B,EAAAC,GACA,GAAAwB,EAEA,YADAA,GAAA,EAGAD,GAAAxB,EAAAQ,SACAK,EAAAmB,OAAAhB,EAAA,kBAAiDhB,KAAAC,UAGjD,mBAEA,MAAA6B,GACAA,IAIA,MAAAJ,GACAA,IAIAb,EAAAoB,iBAAAjB,QDwCG","file":"common.0f35a0fcdd77c77ad17b.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 100:\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(3);\n__webpack_require__(63);\n__webpack_require__(38);\nmodule.exports = __webpack_require__(103);\n\n\n/***/ }),\n\n/***/ 103:\n/***/ (function(module, exports) {\n\nexports.sync = function (store, router, options) {\n  var moduleName = (options || {}).moduleName || 'route'\n\n  store.registerModule(moduleName, {\n    namespaced: true,\n    state: cloneRoute(router.currentRoute),\n    mutations: {\n      'ROUTE_CHANGED': function ROUTE_CHANGED (state, transition) {\n        store.state[moduleName] = cloneRoute(transition.to, transition.from)\n      }\n    }\n  })\n\n  var isTimeTraveling = false\n  var currentPath\n\n  // sync router on store change\n  var storeUnwatch = store.watch(\n    function (state) { return state[moduleName]; },\n    function (route) {\n      var fullPath = route.fullPath;\n      if (fullPath === currentPath) {\n        return\n      }\n      if (currentPath != null) {\n        isTimeTraveling = true\n        router.push(route)\n      }\n      currentPath = fullPath\n    },\n    { sync: true }\n  )\n\n  // sync store on router navigation\n  var afterEachUnHook = router.afterEach(function (to, from) {\n    if (isTimeTraveling) {\n      isTimeTraveling = false\n      return\n    }\n    currentPath = to.fullPath\n    store.commit(moduleName + '/ROUTE_CHANGED', { to: to, from: from })\n  })\n\n  return function unsync () {\n    // On unsync, remove router hook\n    if (afterEachUnHook != null) {\n      afterEachUnHook()\n    }\n\n    // On unsync, remove store watch\n    if (storeUnwatch != null) {\n      storeUnwatch()\n    }\n\n    // On unsync, unregister Module with store\n    store.unregisterModule(moduleName)\n  }\n}\n\nfunction cloneRoute (to, from) {\n  var clone = {\n    name: to.name,\n    path: to.path,\n    hash: to.hash,\n    query: to.query,\n    params: to.params,\n    fullPath: to.fullPath,\n    meta: to.meta\n  }\n  if (from) {\n    clone.from = cloneRoute(from)\n  }\n  return Object.freeze(clone)\n}\n\n\n\n/***/ })\n\n},[100]);\n\n\n// WEBPACK FOOTER //\n// common.0f35a0fcdd77c77ad17b.js","exports.sync = function (store, router, options) {\n  var moduleName = (options || {}).moduleName || 'route'\n\n  store.registerModule(moduleName, {\n    namespaced: true,\n    state: cloneRoute(router.currentRoute),\n    mutations: {\n      'ROUTE_CHANGED': function ROUTE_CHANGED (state, transition) {\n        store.state[moduleName] = cloneRoute(transition.to, transition.from)\n      }\n    }\n  })\n\n  var isTimeTraveling = false\n  var currentPath\n\n  // sync router on store change\n  var storeUnwatch = store.watch(\n    function (state) { return state[moduleName]; },\n    function (route) {\n      var fullPath = route.fullPath;\n      if (fullPath === currentPath) {\n        return\n      }\n      if (currentPath != null) {\n        isTimeTraveling = true\n        router.push(route)\n      }\n      currentPath = fullPath\n    },\n    { sync: true }\n  )\n\n  // sync store on router navigation\n  var afterEachUnHook = router.afterEach(function (to, from) {\n    if (isTimeTraveling) {\n      isTimeTraveling = false\n      return\n    }\n    currentPath = to.fullPath\n    store.commit(moduleName + '/ROUTE_CHANGED', { to: to, from: from })\n  })\n\n  return function unsync () {\n    // On unsync, remove router hook\n    if (afterEachUnHook != null) {\n      afterEachUnHook()\n    }\n\n    // On unsync, remove store watch\n    if (storeUnwatch != null) {\n      storeUnwatch()\n    }\n\n    // On unsync, unregister Module with store\n    store.unregisterModule(moduleName)\n  }\n}\n\nfunction cloneRoute (to, from) {\n  var clone = {\n    name: to.name,\n    path: to.path,\n    hash: to.hash,\n    query: to.query,\n    params: to.params,\n    fullPath: to.fullPath,\n    meta: to.meta\n  }\n  if (from) {\n    clone.from = cloneRoute(from)\n  }\n  return Object.freeze(clone)\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vuex-router-sync/index.js\n// module id = 103\n// module chunks = 1"],"sourceRoot":""}